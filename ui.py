# -*- coding: utf-8 -*-
"""ui.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JsGcYwDZN0nuI5UKrINOPEZlZeHWqKoD
"""

import pickle

filename = 'model_file.sav'
loaded_model = pickle.load(open(filename, 'rb'))

!pip install flask-ngrok

from flask import Flask, request, jsonify, render_template
import requests
from flask_ngrok import run_with_ngrok
import numpy
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import Normalizer

app = Flask(__name__, template_folder="sample_data/static/templates")
run_with_ngrok(app)
@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict',methods=['POST'])
def predict():
    flag_categories = ['OTH','REJ','RSTO','RSTOS0','RSTR','S0','S1','S2','S3','SF','SH']
    service_categories = ['IRC', 'X11', 'Z39_50', 'auth', 'bgp', 'courier', 'csnet_ns', 'ctf', 'daytime', 'discard', 'domain', 'domain_u', 'echo', 'eco_i', 'ecr_i', 'efs', 'exec', 'finger', 'ftp', 'ftp_data', 'gopher', 'hostnames', 'http', 'http_443', 'http_8001', 'imap4', 'iso_tsap', 'klogin', 'kshell', 'ldap', 'link', 'login', 'mtp', 'name', 'netbios_dgm', 'netbios_ns', 'netbios_ssn', 'netstat', 'nnsp', 'nntp', 'ntp_u', 'other', 'pm_dump', 'pop_2', 'pop_3', 'printer', 'private', 'red_i', 'remote_job', 'rje', 'shell', 'smtp', 'sql_net', 'ssh', 'sunrpc', 'supdup', 'systat', 'telnet', 'tim_i', 'time', 'urh_i', 'urp_i', 'uucp', 'uucp_path', 'vmnet', 'whois']

    v1 = request.form.get('service')
    v2 = request.form.get('flag')
    v3 = request.form.get('logged_in')
    v4 = request.form.get('count')
    v5 = request.form.get('serror_rate')
    v6 = request.form.get('srv_serror_rate')
    v7 = request.form.get('same_srv_rate')
    v8 = request.form.get('dst_host_srv_count')
    v9 = request.form.get('dst_host_same_srv_rate')
    v10 = request.form.get('dst_host_serror_rate')
    v11 = request.form.get('dst_host_srv_serror_rate')
    a = []
    a.append(v1)
    a.append(v2)
    a.append(v3)
    a.append(v4)
    a.append(v5)
    a.append(v6)
    a.append(v7)
    a.append(v8)
    a.append(v9)
    a.append(v10)
    a.append(v11)

    for index in range(len(service_categories)):
      if(v1 == service_categories[index]):
        a.insert(index+1,1)
      else:
        a.insert(index+1,0)
    a.pop(0)
    for index in range(len(flag_categories)):
      if(v2 == flag_categories[index]):
        a.insert(index+67,1)
      else:
        a.insert(index+67,0)
    a.pop(66)
    b = []
    b.append(a)
    arr1 = numpy.asarray(b)


    nm=Normalizer()
    arr1[:,:]=nm.fit_transform(arr1[:,:])
    op = loaded_model.predict(arr1)
    res = ''
    if(op == 1):
      res='Normal'
    else:
      res='Anomaly'
    return render_template('result.html',pred='The packet is {}'.format(res))

app.run()

"""# New section"""

